#!/usr/bin/env bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Prompt for user confirmation
confirm() {
    read -p "$1 (y/N): " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]
}

# Install Homebrew if not present
install_homebrew() {
    if command_exists brew; then
        print_success "Homebrew is already installed"
        return
    fi
    
    print_info "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH for Apple Silicon Macs
    if [[ $(uname -m) == "arm64" ]]; then
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
        eval "$(/opt/homebrew/bin/brew shellenv)"
    fi
    
    print_success "Homebrew installed successfully"
}

# Install recommended utilities via Homebrew
install_utilities() {
    print_info "Installing recommended utilities..."
    
    # Essential command line tools
    local utilities=(
        "git"
        "zsh"
        "curl"
        "wget"
        "tree"
        "htop"
        "jq"
        "ripgrep"
        "fd"
        "bat"
        "fzf"
        "tmux"
    )
    
    for utility in "${utilities[@]}"; do
        if brew list "$utility" &>/dev/null; then
            print_success "$utility is already installed"
        else
            print_info "Installing $utility..."
            brew install "$utility"
        fi
    done
    
    print_success "Utilities installation completed"
}

# Install Oh My Zsh
install_oh_my_zsh() {
    if [ -d "$HOME/.oh-my-zsh" ]; then
        print_success "Oh My Zsh is already installed"
        return
    fi
    
    print_info "Installing Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    print_success "Oh My Zsh installed successfully"
}

# Install zsh-autosuggestions
install_zsh_autosuggestions() {
    local plugin_dir="$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    
    if [ -d "$plugin_dir" ]; then
        print_success "zsh-autosuggestions is already installed"
        return
    fi
    
    print_info "Installing zsh-autosuggestions..."
    git clone https://github.com/zsh-users/zsh-autosuggestions "$plugin_dir"
    print_success "zsh-autosuggestions installed successfully"
}

# Install zsh-syntax-highlighting
install_zsh_syntax_highlighting() {
    local plugin_dir="$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
    
    if [ -d "$plugin_dir" ]; then
        print_success "zsh-syntax-highlighting is already installed"
        return
    fi
    
    print_info "Installing zsh-syntax-highlighting..."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$plugin_dir"
    print_success "zsh-syntax-highlighting installed successfully"
}

# Link dotfiles
link_file() {
    local src="$1"
    local dest="$2"
    
    if [ -L "$dest" ]; then
        print_warning "$dest is already a symlink, removing..."
        rm "$dest"
    elif [ -f "$dest" ] || [ -d "$dest" ]; then
        if confirm "$dest already exists. Replace it?"; then
            rm -rf "$dest"
        else
            print_warning "Skipping $dest"
            return
        fi
    fi
    
    ln -s "$src" "$dest"
    print_success "Linked $src to $dest"
}

# Install dotfiles
install_dotfiles() {
    local dotfiles_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
    
    print_info "Installing dotfiles from $dotfiles_dir..."
    
    # Link zsh configuration
    if [ -f "$dotfiles_dir/zsh/.zshrc" ]; then
        link_file "$dotfiles_dir/zsh/.zshrc" "$HOME/.zshrc"
    fi
    
    # Link git configuration if it exists
    if [ -f "$dotfiles_dir/git/.gitconfig" ]; then
        link_file "$dotfiles_dir/git/.gitconfig" "$HOME/.gitconfig"
    fi
    
    if [ -f "$dotfiles_dir/git/.gitignore_global" ]; then
        link_file "$dotfiles_dir/git/.gitignore_global" "$HOME/.gitignore_global"
    fi
    
    # Link vim configuration if it exists
    if [ -f "$dotfiles_dir/vim/.vimrc" ]; then
        link_file "$dotfiles_dir/vim/.vimrc" "$HOME/.vimrc"
    fi
    
    if [ -d "$dotfiles_dir/vim/.vim" ]; then
        link_file "$dotfiles_dir/vim/.vim" "$HOME/.vim"
    fi
    
    # Link tmux configuration if it exists
    if [ -f "$dotfiles_dir/tmux/.tmux.conf" ]; then
        link_file "$dotfiles_dir/tmux/.tmux.conf" "$HOME/.tmux.conf"
    fi
    
    print_success "Dotfiles installation completed"
}

# Set zsh as default shell
set_zsh_as_default() {
    if [ "$SHELL" = "$(which zsh)" ]; then
        print_success "Zsh is already the default shell"
        return
    fi
    
    print_info "Setting zsh as default shell..."
    
    # Add zsh to /etc/shells if not present
    if ! grep -q "$(which zsh)" /etc/shells; then
        echo "$(which zsh)" | sudo tee -a /etc/shells
    fi
    
    chsh -s "$(which zsh)"
    print_success "Zsh set as default shell"
}

# Main installation function
main() {
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                    Dotfiles Installation                    ║"
    echo "║                                                              ║"
    echo "║  This script will install:                                   ║"
    echo "║  • Homebrew (if not installed)                               ║"
    echo "║  • Essential command line utilities                          ║"
    echo "║  • Oh My Zsh                                                 ║"
    echo "║  • zsh-autosuggestions                                       ║"
    echo "║  • zsh-syntax-highlighting                                   ║"
    echo "║  • Your dotfiles configuration                               ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    if ! confirm "Do you want to proceed with the installation?"; then
        print_info "Installation cancelled"
        exit 0
    fi
    
    # Check if we're on macOS
    if [[ "$OSTYPE" != "darwin"* ]]; then
        print_warning "This script is designed for macOS. Some features may not work on other systems."
        if ! confirm "Do you want to continue anyway?"; then
            exit 1
        fi
    fi
    
    # Install Homebrew
    install_homebrew
    
    # Install utilities
    install_utilities
    
    # Install Oh My Zsh
    install_oh_my_zsh
    
    # Install zsh plugins
    install_zsh_autosuggestions
    install_zsh_syntax_highlighting
    
    # Install dotfiles
    install_dotfiles
    
    # Set zsh as default shell
    set_zsh_as_default
    
    echo
    print_success "Installation completed successfully!"
    print_info "Please restart your terminal or run 'source ~/.zshrc' to see the changes."
    print_info "You may need to log out and log back in for the shell change to take effect."
}

# Run main function
main "$@" 